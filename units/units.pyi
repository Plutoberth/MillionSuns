from typing import Generic, TypeVar

T = TypeVar("T")

class Unit(Generic[T]):
    def __add__(self, other: T) -> T: ...
    def __radd__(self, other: T) -> T: ...
    def __sub__(self, other: T) -> T: ...
    def __rsub__(self, other: T) -> T: ...
    def __mul__(self, other: int | float) -> T: ...
    def __rmul__(self, other: int | float) -> T: ...

class Hour(Unit["Hour"]): ...

class kW(Unit["kW"]):
    def __mul__(self, other: Hour) -> kWh: ...
    def __rmul__(self, other: Hour) -> kWh: ...

class ILS(Unit["ILS"]): ...

class kg(Unit["kg"]): ...

class kg_per_kWh(Unit["kg_per_kWh"]):
    def __mul__(self, other: kWh) -> kg: ...
    def __rmul__(self, other: kWh) -> kg: ...

class ILS_per_kg(Unit["ILS_per_kg"]):
    def __mul__(self, other: kg) -> ILS: ...
    def __rmul__(self, other: kg) -> ILS: ...

class ILS_per_kWh(Unit["ILS_per_kWh"]):
    def __mul__(self, other: kWh) -> ILS: ...
    def __rmul__(self, other: kWh) -> ILS: ...

class ILS_per_kW(Unit["ILS_per_kW"]):
    def __mul__(self, other: kW) -> ILS: ...
    def __rmul__(self, other: kW) -> ILS: ...

class kWh(Unit["kWh"]): ...
